9-1
1.プログラミング方針
計算の関数は授業内で扱われているので説明を省略する。main関数のフローについて書く。まず数字を入力する。①それが0より小さかったら分岐しでデキューしてプログラム終了。②①以外で、2で割り切れる数字だったらキュー内を探索しその整数がかぶっているか確認。かぶっていたらbool型のexitという変数をtrueにする。かぶっていなかったらfalse。exitがfalseならエンキューする。trueなら既に格納されていると出力し整数入力に戻る。③①②に属さない整数、つまり正の奇数が入力された場合はデキューする。

2.実行結果
整数を入力して下さい:
10
enqueue(10) :   キューの中 [ 10 ]
先頭 = 0,        末尾 = 1        
整数を入力して下さい:
20
enqueue(20) :   キューの中 [ 10 20 ]
先頭 = 0,        末尾 = 2
整数を入力して下さい:
30
enqueue(30) :   キューの中 [ 10 20 30 ]
先頭 = 0,        末尾 = 3
整数を入力して下さい:
5
dequeue() 10 :  キューの中 [ 20 30 ]
先頭 = 1,        末尾 = 3
整数を入力して下さい:
15
dequeue() 20 :  キューの中 [ 30 ]
先頭 = 2,        末尾 = 3        
整数を入力して下さい:
30
enqueue：既に格納されています
整数を入力して下さい:        
5
dequeue() 30 :  キューの中 [ ]
先頭 = 3,        末尾 = 3     
整数を入力して下さい:
5

dequeue : 空状態のためデキューできません。

3.プログラムを実行する上で困難だった点、工夫点
キューがフル状態になった瞬間にプログラムが終了するというところで困った。そのため9-3と比べ、while文を回す条件を変えた。while文の中を!chkFullにするとフル状態のときにwhile文に入らなくなり、エンキュー出来ませんと出力できなかった。そのためwhile文は無限に回し、フル状態をenqueue関数の中で検知し、その中でerror関数が回ることでexit(1)によりプログラムが終了するようにした。


9-3
1.プログラミング方針
main関数の中身のフローは9-1と変わらないので同じものを書く。まず数字を入力する。①それが0より小さかったら分岐しでデキューしてプログラム終了。②①以外で、2で割り切れる数字だったらキュー内を探索しその整数がかぶっているか確認。かぶっていたらbool型のexitという変数をtrueにする。かぶっていなかったらfalse。exitがfalseならエンキューする。trueなら既に格納されていると出力し整数入力に戻る。③①②に属さない整数、つまり正の奇数が入力された場合はデキューする。

2.実行結果
整数を入力して下さい：
10
enqueue(10) :   キューの中 [ 10 ]
                キューの中のアドレス [ 00031598 00000000 ]

 整数を入力して下さい：
20
enqueue(20) :   キューの中 [ 10 20 ]
                キューの中のアドレス [ 00031598 000315C8 00000000 ]    

 整数を入力して下さい：
30
enqueue(30) :   キューの中 [ 10 20 30 ]
                キューの中のアドレス [ 00031598 000315C8 00031630 00000000 ]

 整数を入力して下さい：
10
enqueue：既に格納されています

 整数を入力して下さい：
15
dequeue します:         キューの中 [ 20 30 ]
                キューの中のアドレス [ 000315C8 00031630 00000000 ]    

 整数を入力して下さい：
-1
dequeue します:         キューの中 [ 30 ]
                キューの中のアドレス [ 00031630 00000000 ]
dequeue します:         キューの中 [ ]
                キューの中のアドレス [ 00000000 ]
空状態のためデキューできません．


3.プログラムを実行する上で困った点、工夫点
同じ数字があるかどうかを探すときになぜかうまくプログラムが回らなかった。そこで関数printQueueと同じようにq = Q->frontと置いてq != NULLのときにwhile文を回し、その中でq = q->nextすることで次に進めていった。